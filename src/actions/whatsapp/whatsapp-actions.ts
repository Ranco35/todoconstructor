'use server';

import type {
  WhatsAppMessage,
  WhatsAppResponse
} from '@/lib/whatsapp-client';
import { chatWithOpenAI } from '@/actions/ai/openai-actions';
import { ChatMessage } from '@/lib/openai-client';

// Sistema de respuestas autom√°ticas con ChatGPT
export async function processIncomingMessage(message: WhatsAppMessage): Promise<WhatsAppResponse> {
  try {
    const { isCommand, isBusinessHours } = await import('@/lib/whatsapp-client');
    console.log('üîÑ Procesando mensaje de WhatsApp:', {
      from: message.contact?.number,
      body: message.body.substring(0, 100),
    });

    // Verificar si es un comando espec√≠fico
    if (isCommand(message.body)) {
      return await handleCommand(message);
    }

    // Verificar horarios de atenci√≥n
    if (!isBusinessHours()) {
      return await sendOutOfHoursMessage(message);
    }

    // Generar respuesta con ChatGPT
    return await generateAIResponse(message);

  } catch (error) {
    console.error('‚ùå Error procesando mensaje:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

// Manejar comandos espec√≠ficos del hotel
async function handleCommand(message: WhatsAppMessage): Promise<WhatsAppResponse> {
  const { HOTEL_COMMANDS, WHATSAPP_BOT_CONFIG, whatsappManager, isBusinessHours } = await import('@/lib/whatsapp-client');
  const command = extractCommand(message.body);
  const number = message.contact?.number || message.from.replace('@c.us', '');

  let responseText = '';

  switch (command) {
    case '/inicio':
      responseText = WHATSAPP_BOT_CONFIG.welcomeMessage;
      break;

    case '/habitaciones':
      responseText = `üè® *TIPOS DE HABITACIONES DISPONIBLES*

üõèÔ∏è *Habitaci√≥n Est√°ndar*
‚Ä¢ Cama matrimonial o dos camas individuales
‚Ä¢ Ba√±o privado con ducha
‚Ä¢ WiFi gratuito
‚Ä¢ TV cable
‚Ä¢ Precio: Desde $50.000/noche

üõèÔ∏è *Habitaci√≥n Superior*
‚Ä¢ Cama king size
‚Ä¢ Ba√±o con tina y ducha
‚Ä¢ Vista al jard√≠n
‚Ä¢ Minibar
‚Ä¢ Precio: Desde $65.000/noche

üõèÔ∏è *Suite Premium*
‚Ä¢ Sala de estar separada
‚Ä¢ Jacuzzi privado
‚Ä¢ Vista panor√°mica
‚Ä¢ Servicio a la habitaci√≥n 24h
‚Ä¢ Precio: Desde $120.000/noche

Para reservar escribe: "Quiero reservar [tipo de habitaci√≥n]"`;
      break;

    case '/spa':
      responseText = `üßò‚Äç‚ôÄÔ∏è *SERVICIOS DE SPA DISPONIBLES*

üíÜ‚Äç‚ôÄÔ∏è *Masajes*
‚Ä¢ Relajante con aceites esenciales (60min) - $45.000
‚Ä¢ Descontracturante (90min) - $65.000
‚Ä¢ Piedras calientes (75min) - $55.000

üõÅ *Tratamientos Corporales*
‚Ä¢ Exfoliaci√≥n corporal - $35.000
‚Ä¢ Envolturas relajantes - $40.000
‚Ä¢ Hidroterapia - $30.000

üßñ‚Äç‚ôÄÔ∏è *Faciales*
‚Ä¢ Limpieza facial profunda - $25.000
‚Ä¢ Anti-aging - $35.000
‚Ä¢ Hidrataci√≥n intensiva - $28.000

üèä‚Äç‚ôÄÔ∏è *Piscinas Termales*
‚Ä¢ Acceso diario - $15.000
‚Ä¢ Acceso con almuerzo - $35.000

*Horarios:* Lunes a Domingo 9:00 - 20:00
*Reservas:* Escribe "Quiero reservar [servicio]"`;
      break;

    case '/restaurante':
      responseText = `üçΩÔ∏è *RESTAURANTE ADMINTERMAS*

‚è∞ *Horarios de Atenci√≥n:*
‚Ä¢ Desayuno: 7:00 - 10:30
‚Ä¢ Almuerzo: 12:30 - 15:30  
‚Ä¢ Cena: 19:00 - 22:00

ü•ê *Desayuno Buffet*
‚Ä¢ Continental completo
‚Ä¢ Frutas frescas, cereales, l√°cteos
‚Ä¢ Pan artesanal, mermeladas
‚Ä¢ Precio: $18.000 por persona

üçñ *Especialidades*
‚Ä¢ Cordero patag√≥nico
‚Ä¢ Salm√≥n grillado
‚Ä¢ Pastas artesanales
‚Ä¢ Postres caseros

üç∑ *Carta de Vinos*
‚Ä¢ Selecci√≥n de vinos locales
‚Ä¢ Maridajes especiales
‚Ä¢ Cervezas artesanales

Para consultas espec√≠ficas del men√∫ escribe: "Men√∫ del d√≠a"`;
      break;

    case '/reserva':
      responseText = `üìÖ *HACER UNA RESERVA*

Para procesar tu reserva necesito la siguiente informaci√≥n:

1Ô∏è‚É£ *Tipo de servicio:*
   ‚Ä¢ Habitaci√≥n (especifica tipo)
   ‚Ä¢ Spa (especifica tratamiento)
   ‚Ä¢ Restaurante

2Ô∏è‚É£ *Fechas:*
   ‚Ä¢ Fecha de llegada
   ‚Ä¢ Fecha de salida

3Ô∏è‚É£ *N√∫mero de personas:*
   ‚Ä¢ Adultos
   ‚Ä¢ Ni√±os (edad)

4Ô∏è‚É£ *Informaci√≥n de contacto:*
   ‚Ä¢ Nombre completo
   ‚Ä¢ Email

*Ejemplo:*
"Quiero reservar habitaci√≥n est√°ndar del 15 al 17 de julio para 2 adultos. Mi nombre es Juan P√©rez, email: juan@email.com"

¬°Te ayudo a completar tu reserva paso a paso! üòä`;
      break;

    case '/precios':
      responseText = `üí∞ *TARIFAS ACTUALES*

üè® *Habitaciones (por noche):*
‚Ä¢ Est√°ndar: $50.000 - $55.000
‚Ä¢ Superior: $65.000 - $75.000  
‚Ä¢ Suite Premium: $120.000 - $150.000

üßò‚Äç‚ôÄÔ∏è *Spa (por sesi√≥n):*
‚Ä¢ Masajes: $45.000 - $65.000
‚Ä¢ Tratamientos: $25.000 - $40.000
‚Ä¢ Piscinas termales: $15.000/d√≠a

üçΩÔ∏è *Restaurante:*
‚Ä¢ Desayuno: $18.000
‚Ä¢ Almuerzo: $25.000 - $35.000
‚Ä¢ Cena: $30.000 - $45.000

üì¶ *Paquetes:*
‚Ä¢ Solo alojamiento
‚Ä¢ Media pensi√≥n (hab + desayuno)
‚Ä¢ Pensi√≥n completa
‚Ä¢ Todo incluido

*Los precios var√≠an seg√∫n temporada*
Para cotizaci√≥n exacta comparte tus fechas.`;
      break;

    case '/ubicacion':
      responseText = `üìç *UBICACI√ìN Y ACCESO*

üè® *AdminTermas Hotel & Spa*

üìß Direcci√≥n: [Tu direcci√≥n completa aqu√≠]
üó∫Ô∏è Regi√≥n: [Tu regi√≥n]
üá®üá± Pa√≠s: Chile

üöó *C√≥mo llegar:*
‚Ä¢ Desde Santiago: 3 horas en auto
‚Ä¢ Desde aeropuerto: 2.5 horas
‚Ä¢ Transporte p√∫blico disponible

üöå *Servicios de traslado:*
‚Ä¢ Transfer desde aeropuerto
‚Ä¢ Pick-up en terminal de buses
‚Ä¢ Coordinamos tu llegada

üì± *Coordenadas GPS:*
Lat: [Tu latitud]
Lng: [Tu longitud]

¬øNecesitas ayuda con el transporte?`;
      break;

    case '/contacto':
      responseText = `üìû *INFORMACI√ìN DE CONTACTO*

üè® *AdminTermas Hotel & Spa*

üì± *WhatsApp:* Este mismo n√∫mero
‚òéÔ∏è *Tel√©fono:* [Tu tel√©fono]
üìß *Email:* [Tu email]
üåê *Website:* [Tu website]

‚è∞ *Atenci√≥n WhatsApp:*
‚Ä¢ Lunes a Domingo: 8:00 - 22:00
‚Ä¢ Respuestas autom√°ticas 24/7

üìû *Recepci√≥n:*
‚Ä¢ 24 horas disponible
‚Ä¢ Emergencias atendidas siempre

üóìÔ∏è *Reservas:*
‚Ä¢ Online por WhatsApp
‚Ä¢ Por tel√©fono
‚Ä¢ Email

¬°Estamos aqu√≠ para ayudarte! üòä`;
      break;

    case '/estado':
      const status = whatsappManager.getStatus();
      responseText = `ü§ñ *ESTADO DEL BOT*

‚úÖ Estado: ${status.isReady ? 'Operativo' : 'Desconectado'}
üìä Mensajes procesados: ${status.messagesProcessed}
‚ö° √öltima actividad: ${status.lastActivity?.toLocaleString('es-CL') || 'N/A'}
üïê Horario actual: ${new Date().toLocaleTimeString('es-CL')}
üü¢ Horario comercial: ${isBusinessHours() ? 'S√ç' : 'NO'}

*El bot responde autom√°ticamente 24/7*
*Atenci√≥n personalizada: 8:00 - 22:00*`;
      break;

    default:
      responseText = `‚ùì Comando no reconocido: ${command}

*Comandos disponibles:*
${Object.entries(HOTEL_COMMANDS).map(([cmd, desc]) => `‚Ä¢ ${cmd} - ${desc}`).join('\n')}

O simplemente escribe tu consulta y te ayudo inmediatamente.`;
  }

  return await sendMessage(number, responseText);
}

// Mensaje para fuera de horario comercial
async function sendOutOfHoursMessage(message: WhatsAppMessage): Promise<WhatsAppResponse> {
  const { WHATSAPP_BOT_CONFIG } = await import('@/lib/whatsapp-client');
  const number = message.contact?.number || message.from.replace('@c.us', '');
  
  const outOfHoursMessage = `üåô *Fuera de horario comercial*

Gracias por contactar AdminTermas Hotel & Spa.

‚è∞ *Nuestro horario de atenci√≥n personalizada es:*
${WHATSAPP_BOT_CONFIG.businessHours.start} - ${WHATSAPP_BOT_CONFIG.businessHours.end} hrs

ü§ñ *Mientras tanto:*
‚Ä¢ Puedo ayudarte con informaci√≥n b√°sica
‚Ä¢ Consulta nuestros servicios con /habitaciones, /spa, /restaurante
‚Ä¢ Para emergencias llama a recepci√≥n: [tu n√∫mero]

Tu mensaje: "${message.body}"

¬øEn qu√© puedo ayudarte ahora? (Respuesta autom√°tica)`;

  return await sendMessage(number, outOfHoursMessage);
}

// Generar respuesta con ChatGPT
async function generateAIResponse(message: WhatsAppMessage): Promise<WhatsAppResponse> {
  try {
    const number = message.contact?.number || message.from.replace('@c.us', '');
    const customerName = message.contact?.name || message.contact?.pushname || 'Cliente';

    // Sistema de prompt espec√≠fico para el hotel
    const systemMessage: ChatMessage = {
      role: 'system',
      content: `Eres el asistente de WhatsApp de AdminTermas Hotel & Spa en Chile. 

IDENTIDAD:
- Eres amigable, profesional y servicial
- Respondes en espa√±ol chileno de forma natural  
- Usas emojis apropiados pero sin exceso
- Tu objetivo es ayudar con reservas, informaci√≥n y consultas

SERVICIOS DEL HOTEL:
- Habitaciones: Est√°ndar ($50.000), Superior ($65.000), Suite Premium ($120.000)
- Spa: Masajes, tratamientos, piscinas termales ($15.000-$65.000)
- Restaurante: Desayuno ($18.000), almuerzo/cena ($25.000-$45.000)
- Paquetes: Solo alojamiento, media pensi√≥n, pensi√≥n completa, todo incluido

HORARIOS:
- Atenci√≥n personalizada WhatsApp: 8:00-22:00
- Check-in: 15:00, Check-out: 12:00
- Spa: 9:00-20:00
- Restaurante: Desayuno 7:00-10:30, Almuerzo 12:30-15:30, Cena 19:00-22:00

INSTRUCCIONES:
- Responde de forma concisa pero completa
- Si no sabes algo espec√≠fico, deriva a "llama a recepci√≥n"
- Para reservas, pide: fechas, tipo habitaci√≥n/servicio, n√∫mero personas, contacto
- Ofrece alternativas cuando algo no est√© disponible
- Siempre termina preguntando si puede ayudar en algo m√°s

COMANDOS: El cliente puede usar /habitaciones, /spa, /restaurante, /reserva, /precios, /contacto

Responde como si fueras el recepcionista virtual del hotel.`
    };

    const userMessage: ChatMessage = {
      role: 'user',
      content: `Cliente: ${customerName}
Mensaje: ${message.body}

(Responde directamente al cliente de forma natural y √∫til)`
    };

    console.log('ü§ñ Generando respuesta con ChatGPT para WhatsApp...');

    const aiResponse = await chatWithOpenAI({
      messages: [systemMessage, userMessage],
      taskType: 'content_generation',
    });

    if (aiResponse.success && aiResponse.data?.message) {
      // Agregar pie de mensaje si la respuesta no incluye comandos
      let finalResponse = aiResponse.data.message;
      
      if (!finalResponse.includes('/') && !finalResponse.includes('comando')) {
        finalResponse += `\n\n_Tip: Usa /habitaciones, /spa, /restaurante para info r√°pida_`;
      }

      return await sendMessage(number, finalResponse);
    } else {
      // Fallback si ChatGPT falla
      const fallbackMessage = `Hola ${customerName} üëã

Gracias por tu mensaje. En este momento estoy procesando tu consulta.

Mientras tanto, puedes usar estos comandos r√°pidos:
‚Ä¢ /habitaciones - Ver tipos y precios
‚Ä¢ /spa - Servicios de spa
‚Ä¢ /restaurante - Men√∫ y horarios
‚Ä¢ /reserva - Hacer una reserva

O llama directamente a recepci√≥n para atenci√≥n inmediata.

¬øEn qu√© m√°s puedo ayudarte?`;

      return await sendMessage(number, fallbackMessage);
    }

  } catch (error) {
    console.error('‚ùå Error generando respuesta AI:', error);
    
    // Mensaje de error amigable
    const errorMessage = `Disculpa, tengo problemas t√©cnicos temporales.

Para atenci√≥n inmediata:
üìû Llama a recepci√≥n: [tu n√∫mero]
‚è∞ Horario: 24 horas

Intenta nuevamente en unos minutos o usa:
/habitaciones, /spa, /restaurante

¬°Gracias por tu paciencia! üôè`;

    const number = message.contact?.number || message.from.replace('@c.us', '');
    return await sendMessage(number, errorMessage);
  }
}

// Funci√≥n para enviar mensajes
export async function sendMessage(to: string, message: string): Promise<WhatsAppResponse> {
  try {
    const { formatPhoneNumber, whatsappManager } = await import('@/lib/whatsapp-client');
    const formattedNumber = formatPhoneNumber(to);
    console.log('üì§ Enviando mensaje WhatsApp a:', formattedNumber);
    
    const response = await whatsappManager.sendMessage(formattedNumber, message);
    
    if (response.success) {
      console.log('‚úÖ Mensaje enviado exitosamente');
    } else {
      console.error('‚ùå Error enviando mensaje:', response.error);
    }
    
    return response;
  } catch (error) {
    console.error('‚ùå Error en sendMessage:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

// Funci√≥n para inicializar el bot de WhatsApp
export async function initializeWhatsAppBot(): Promise<{ success: boolean; error?: string }> {
  try {
    const { whatsappManager } = await import('@/lib/whatsapp-client');
    console.log('üöÄ Inicializando bot de WhatsApp...');
    
    // Registrar el handler de mensajes
    whatsappManager.onMessage(async (message) => {
      try {
        await processIncomingMessage(message);
      } catch (error) {
        console.error('‚ùå Error en message handler:', error);
      }
    });

    // Inicializar el cliente
    await whatsappManager.initialize();
    
    console.log('‚úÖ Bot de WhatsApp inicializado exitosamente');
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Error inicializando bot:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

// Obtener estado del bot
export async function getWhatsAppStatus() {
  try {
    const { whatsappManager, isBusinessHours, WHATSAPP_BOT_CONFIG } = await import('@/lib/whatsapp-client');
    const status = whatsappManager.getStatus();
    const clientInfo = await whatsappManager.getClientInfo();
    
    return {
      success: true,
      data: {
        ...status,
        clientInfo,
        businessHours: {
          current: isBusinessHours(),
          start: WHATSAPP_BOT_CONFIG.businessHours.start,
          end: WHATSAPP_BOT_CONFIG.businessHours.end,
        },
        config: WHATSAPP_BOT_CONFIG,
      },
    };
  } catch (error) {
    console.error('‚ùå Error obteniendo estado:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

// Enviar mensaje de bienvenida manual
export async function sendWelcomeMessage(phoneNumber: string): Promise<WhatsAppResponse> {
  const { WHATSAPP_BOT_CONFIG } = await import('@/lib/whatsapp-client');
  return await sendMessage(phoneNumber, WHATSAPP_BOT_CONFIG.welcomeMessage);
}

// Funci√≥n para broadcast (env√≠o masivo)
export async function sendBroadcastMessage(
  phoneNumbers: string[], 
  message: string
): Promise<{ 
  success: boolean; 
  results: Array<{ number: string; success: boolean; error?: string }> 
}> {
  const results = [];
  
  for (const number of phoneNumbers) {
    try {
      const response = await sendMessage(number, message);
      results.push({
        number,
        success: response.success,
        error: response.error,
      });
      
      // Esperar un poco entre mensajes para evitar spam
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      results.push({
        number,
        success: false,
        error: error instanceof Error ? error.message : 'Error desconocido',
      });
    }
  }
  
  const successCount = results.filter(r => r.success).length;
  
  return {
    success: successCount > 0,
    results,
  };
} 