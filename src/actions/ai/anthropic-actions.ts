'use server';

import getAnthropicClient, { 
  DEFAULT_CLAUDE_CONFIG, 
  TASK_CONFIGS, 
  AnthropicResponse, 
  AnthropicMessage, 
  AnthropicRequest,
  convertMessagesToAnthropic
} from '@/lib/anthropic-client';
import { logTokenUsage } from '@/actions/ai/token-usage-actions';
import { getCurrentUser } from '@/actions/configuration/auth-actions';

// Funci√≥n principal para chatear con Anthropic Claude
export async function chatWithClaude(request: AnthropicRequest): Promise<AnthropicResponse> {
  const startTime = Date.now();
  let currentUser = null;
  
  try {
    // Obtener usuario actual para el logging
    try {
      currentUser = await getCurrentUser();
    } catch (userError) {
      console.warn('‚ö†Ô∏è No se pudo obtener usuario actual para logging:', userError);
    }

    // Validar que tenemos la API key
    if (!process.env.ANTHROPIC_API_KEY) {
      return {
        success: false,
        error: 'ANTHROPIC_API_KEY no est√° configurada',
      };
    }

    // Determinar configuraci√≥n a usar
    const config = request.taskType 
      ? { ...DEFAULT_CLAUDE_CONFIG, ...TASK_CONFIGS[request.taskType] }
      : { ...DEFAULT_CLAUDE_CONFIG, model: request.model, max_tokens: request.max_tokens, temperature: request.temperature };

    console.log('ü§ñ Enviando solicitud a Claude:', {
      model: config.model,
      messageCount: request.messages.length,
      taskType: request.taskType || 'general',
      userId: currentUser?.id || 'an√≥nimo',
    });

    // Convertir mensajes al formato de Anthropic
    const { system, messages } = convertMessagesToAnthropic(request.messages);

    // Realizar la llamada a Anthropic
    const response = await getAnthropicClient().messages.create({
      model: config.model as any,
      max_tokens: config.max_tokens as number,
      temperature: config.temperature,
      system: system || request.system,
      messages: messages,
    });

    const assistantMessage = response.content[0]?.type === 'text' ? response.content[0].text : '';

    console.log('‚úÖ Respuesta de Claude recibida:', {
      responseLength: assistantMessage.length,
      usage: response.usage,
      userId: currentUser?.id || 'an√≥nimo',
    });

    // üéØ LOGGING AUTOM√ÅTICO DE TOKENS - Nueva funcionalidad para Anthropic
    if (response.usage) {
      try {
        const logResult = await logTokenUsage({
          session_id: request.sessionId || `session-${startTime}`,
          feature_type: request.taskType || 'chat',
          model_used: config.model as string,
          prompt_tokens: response.usage.input_tokens || 0,
          completion_tokens: response.usage.output_tokens || 0,
          request_type: 'completion',
          endpoint_used: '/messages',
          success: true,
          processing_time_ms: Date.now() - startTime,
        });

        if (!logResult.success) {
          console.warn('‚ö†Ô∏è Error al registrar uso de tokens:', logResult.error);
        } else {
          console.log('üìä Tokens registrados exitosamente:', {
            id: logResult.data?.id,
            totalTokens: response.usage.input_tokens + response.usage.output_tokens,
            estimatedCost: logResult.data?.estimated_cost_usd,
          });
        }
      } catch (logError) {
        console.warn('‚ö†Ô∏è Error en logging de tokens:', logError);
        // No interrumpimos la funci√≥n principal por errores de logging
      }
    }

    return {
      success: true,
      data: {
        message: assistantMessage,
        usage: response.usage,
        model: response.model,
      },
    };

  } catch (error) {
    console.error('‚ùå Error en llamada a Claude:', error);

    // Log del error en tokens
    try {
      await logTokenUsage({
        session_id: request.sessionId || `session-${startTime}`,
        feature_type: request.taskType || 'chat',
        model_used: request.model || DEFAULT_CLAUDE_CONFIG.model,
        prompt_tokens: 0,
        completion_tokens: 0,
        request_type: 'completion',
        endpoint_used: '/messages',
        success: false,
        error_message: error instanceof Error ? error.message : 'Error desconocido',
      });
    } catch (logError) {
      console.warn('‚ö†Ô∏è Error en logging de error:', logError);
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error desconocido al comunicarse con Claude',
    };
  }
}

// Funci√≥n para generar resumen con Claude
export async function generateSummaryWithClaude(content: string, maxWords: number = 100): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres un asistente que genera res√∫menes concisos. Genera un resumen de m√°ximo ${maxWords} palabras del contenido proporcionado.`,
  };

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `Resume el siguiente contenido en m√°ximo ${maxWords} palabras:\n\n${content}`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'analysis',
  });
}

// Funci√≥n para generar respuestas de email autom√°ticas con Claude
export async function generateEmailResponseWithClaude(
  emailContent: string, 
  tone: 'formal' | 'friendly' | 'professional' = 'professional'
): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres un asistente que genera respuestas de email ${tone}es para un hotel/spa. Mant√©n un tono ${tone} y profesional.`,
  };

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `Genera una respuesta adecuada para el siguiente email:\n\n${emailContent}`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'email_generation',
  });
}

// Funci√≥n espec√≠fica para generar presupuestos de grupos con HTML
export async function generateGroupBudgetWithClaude(
  budgetData: {
    clientName: string;
    budgetNumber: string;
    total: number;
    totalGuests: number;
    totalTrips?: number;
    guestsPerTrip?: number;
    items: Array<{ name: string; quantity: number; price: number; description?: string }>;
    validUntil?: string;
  },
  tone: 'formal' | 'friendly' | 'professional' = 'professional'
): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres un asistente especializado en generar presupuestos grupales para Hotel/Spa Termas Llifen. 
    Genera presupuestos ${tone}es, profesionales y orientados a grupos grandes.
    
    Caracter√≠sticas del hotel:
    - Hotel & Spa de lujo en Chile
    - Servicios premium de termas y spa
    - Experiencias para grupos y eventos corporativos
    - Especializado en programas de bienestar grupal
    
    El presupuesto debe:
    - Ser ${tone} y profesional
    - Destacar beneficios para grupos
    - Incluir detalles de servicios grupales
    - Mencionar flexibilidad para grupos grandes
    - Enfocarse en la experiencia de bienestar colectiva`,
  };

  // Calcular estad√≠sticas autom√°ticamente si no se proporcionan
  const totalTrips = budgetData.totalTrips || Math.ceil(budgetData.totalGuests / 42);
  const guestsPerTrip = budgetData.guestsPerTrip || Math.round(budgetData.totalGuests / totalTrips);

  const itemsList = budgetData.items.map(item => 
    `- ${item.name} (Cantidad: ${item.quantity}, Precio: $${item.price.toLocaleString('es-CL')})`
  ).join('\n');

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `Genera un email profesional para un presupuesto GRUPAL con los siguientes datos:

Cliente/Organizaci√≥n: ${budgetData.clientName}
N√∫mero de presupuesto: ${budgetData.budgetNumber}
Total: $${budgetData.total.toLocaleString('es-CL')}
V√°lido hasta: ${budgetData.validUntil || '30 d√≠as'}

DETALLES DEL GRUPO:
- Total de hu√©spedes: ${budgetData.totalGuests} personas
- Viajes programados: ${totalTrips}
- Personas por viaje: ${guestsPerTrip}

Servicios incluidos:
${itemsList}

El email debe incluir:
1. Saludo apropiado para grupos/organizaciones
2. Presentaci√≥n del programa grupal
3. Destacar beneficios para grupos grandes
4. Mencionar flexibilidad y personalizaci√≥n
5. Informaci√≥n de contacto para coordinaci√≥n
6. Despedida profesional

IMPORTANTE: Este es un presupuesto para GRUPOS, no individual. Enf√≥cate en:
- Experiencias colectivas
- Beneficios de grupo
- Coordinaci√≥n de eventos
- Servicios especiales para grupos

Genera solo el contenido del email (sin asunto).`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'email_generation',
  });
}

// Funci√≥n espec√≠fica para generar emails de presupuestos con Claude Sonnet 4
export async function generateBudgetEmailWithClaude(
  budgetData: {
    clientName: string;
    budgetNumber: string;
    total: number;
    items: Array<{ name: string; quantity: number; price: number }>;
    validUntil?: string;
  },
  tone: 'formal' | 'friendly' | 'professional' = 'professional',
  customInstructions?: string
): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres Claude Sonnet 4, el asistente de IA m√°s avanzado de Anthropic, especializado en redacci√≥n comercial para el Hotel & Spa Termas Llifen, un resort de lujo en Chile.

CONTEXTO DEL NEGOCIO:
- Hotel & Spa premium con aguas termales naturales
- Ubicado en Chile, ambiente relajante y de lujo
- Servicios de spa, masajes, gastronom√≠a y alojamiento
- Clientela que busca experiencias de bienestar y relajaci√≥n

TU MISI√ìN:
Generar un email ${tone} pero persuasivo y c√°lido que haga que el cliente QUIERA reservar inmediatamente.

CARACTER√çSTICAS CLAVE DEL EMAIL:
- Tono ${tone} pero acogedor y lujoso
- Enfoque en los beneficios √∫nicos de las termas
- Crear urgencia sutil pero elegante
- Destacar el valor y la experiencia premium
- Incluir elementos emocionales (relajaci√≥n, bienestar, desconexi√≥n)
- Llamada a la acci√≥n clara y motivadora

ELEMENTOS OBLIGATORIOS:
1. Saludo personalizado y c√°lido
2. Contexto sobre los beneficios de las termas
3. Resumen de servicios incluidos con valor agregado
4. Sentido de urgencia elegante
5. Informaci√≥n de contacto directa
6. Despedida que genere acci√≥n inmediata`,
  };

  const itemsList = budgetData.items.map(item => 
    `‚Ä¢ ${item.name} (${item.quantity} ${item.quantity > 1 ? 'unidades' : 'unidad'}) - $${item.price.toLocaleString('es-CL')}`
  ).join('\n');

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `GENERA UN EMAIL COMERCIAL EXCEPCIONAL con estos datos:

üìã DATOS DEL PRESUPUESTO:
‚Ä¢ Cliente: ${budgetData.clientName}
‚Ä¢ N√∫mero: ${budgetData.budgetNumber}
‚Ä¢ Total: $${budgetData.total.toLocaleString('es-CL')} CLP
‚Ä¢ Validez: ${budgetData.validUntil || '30 d√≠as'}

üè® SERVICIOS INCLUIDOS:
${itemsList}

${customInstructions ? `\nüéØ INSTRUCCIONES ESPECIALES:\n${customInstructions}` : ''}

üìù REQUERIMIENTOS:
- Email en espa√±ol chileno
- M√°ximo 400 palabras
- Tono ${tone} pero vendedor
- Enfatizar beneficios √∫nicos de las termas
- Crear deseo y urgencia elegante
- Incluir datos de contacto espec√≠ficos
- NO incluir asunto (solo cuerpo del email)

üí° ELEMENTOS CLAVE A INCLUIR:
- Los beneficios terap√©uticos de las aguas termales
- La experiencia de relajaci√≥n y desconexi√≥n
- El valor excepcional de la oferta
- Sentido de exclusividad y lujo
- Llamada a la acci√≥n motivadora

¬°Genera el mejor email comercial posible que convierta este presupuesto en una reserva confirmada!`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'email_generation',
  });
}

// Funci√≥n para traducir contenido con Claude
export async function translateContentWithClaude(content: string, targetLanguage: string = 'ingl√©s'): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres un traductor profesional. Traduce el contenido de manera precisa y natural al ${targetLanguage}.`,
  };

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `Traduce el siguiente contenido al ${targetLanguage}:\n\n${content}`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'translation',
  });
}

// Funci√≥n para ayuda con c√≥digo usando Claude
export async function getCodeAssistanceWithClaude(codeContext: string, question: string): Promise<AnthropicResponse> {
  const systemMessage: AnthropicMessage = {
    role: 'system',
    content: `Eres un asistente experto en programaci√≥n, especialmente en TypeScript, React y Next.js. Proporciona respuestas t√©cnicas precisas y √∫tiles.`,
  };

  const userMessage: AnthropicMessage = {
    role: 'user',
    content: `Contexto del c√≥digo:\n${codeContext}\n\nPregunta:\n${question}`,
  };

  return chatWithClaude({
    messages: [systemMessage, userMessage],
    taskType: 'code_assistant',
  });
}

// Funci√≥n para verificar el estado de la API de Anthropic
export async function checkClaudeStatus(): Promise<AnthropicResponse> {
  try {
    const testResponse = await chatWithClaude({
      messages: [
        { role: 'user', content: 'Responde solo con "OK" para verificar la conexi√≥n.' }
      ],
      model: 'claude-3-haiku-20240307',
      max_tokens: 10,
    });

    return {
      success: testResponse.success,
      data: testResponse.data,
      error: testResponse.error,
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Error al verificar estado de Claude',
    };
  }
} 