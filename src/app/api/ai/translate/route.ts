import { NextRequest, NextResponse } from 'next/server';
import { translateContent } from '@/actions/ai/openai-actions';

interface TranslateRequest {
  content: string;
  targetLanguage?: string;
  sourceLanguage?: string;
}

export async function POST(request: NextRequest) {
  try {
    const body: TranslateRequest = await request.json();

    // Validar que tenemos contenido
    if (!body.content || typeof body.content !== 'string' || body.content.trim().length === 0) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Se requiere contenido para traducir' 
        },
        { status: 400 }
      );
    }

    // Validar longitud del contenido (m√°ximo 8,000 caracteres)
    if (body.content.length > 8000) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'El contenido es demasiado largo (m√°ximo 8,000 caracteres)' 
        },
        { status: 400 }
      );
    }

    // Idioma objetivo por defecto
    const targetLanguage = body.targetLanguage || 'ingl√©s';

    // Validar idioma objetivo
    const supportedLanguages = [
      'ingl√©s', 'english',
      'franc√©s', 'fran√ßais', 'french',
      'alem√°n', 'deutsch', 'german',
      'italiano', 'italiano', 'italian',
      'portugu√©s', 'portugu√™s', 'portuguese',
      'japon√©s', 'Êó•Êú¨Ë™û', 'japanese',
      'chino', '‰∏≠Êñá', 'chinese',
      'coreano', 'ÌïúÍµ≠Ïñ¥', 'korean',
      'ruso', '—Ä—É—Å—Å–∫–∏–π', 'russian',
      '√°rabe', 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', 'arabic',
    ];

    if (!supportedLanguages.includes(targetLanguage.toLowerCase())) {
      return NextResponse.json(
        { 
          success: false, 
          error: `Idioma no soportado: ${targetLanguage}. Idiomas disponibles: ${supportedLanguages.join(', ')}` 
        },
        { status: 400 }
      );
    }

    console.log('üåç API Translate: Procesando traducci√≥n', {
      contentLength: body.content.length,
      targetLanguage: targetLanguage,
      sourceLanguage: body.sourceLanguage || 'auto-detect',
    });

    // Llamar a la funci√≥n de traducci√≥n
    const response = await translateContent(body.content, targetLanguage);

    // Devolver respuesta
    return NextResponse.json(response);

  } catch (error) {
    console.error('‚ùå Error en API Translate:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error interno del servidor' 
      },
      { status: 500 }
    );
  }
}

// M√©todo GET para obtener informaci√≥n sobre idiomas soportados
export async function GET() {
  return NextResponse.json({
    success: true,
    message: 'API de traducci√≥n funcionando correctamente',
    supportedLanguages: {
      'ingl√©s': 'English',
      'franc√©s': 'Fran√ßais',
      'alem√°n': 'Deutsch',
      'italiano': 'Italiano',
      'portugu√©s': 'Portugu√™s',
      'japon√©s': 'Êó•Êú¨Ë™û',
      'chino': '‰∏≠Êñá',
      'coreano': 'ÌïúÍµ≠Ïñ¥',
      'ruso': '–†—É—Å—Å–∫–∏–π',
      '√°rabe': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
    },
    usage: {
      method: 'POST',
      endpoint: '/api/ai/translate',
      body: {
        content: 'string (requerido, m√°ximo 8,000 caracteres)',
        targetLanguage: 'string (opcional, por defecto: ingl√©s)',
        sourceLanguage: 'string (opcional, auto-detectado)',
      },
    },
    features: [
      'Traducci√≥n autom√°tica de alta calidad',
      'Detecci√≥n autom√°tica de idioma origen',
      'Preservaci√≥n del formato y contexto',
      'Soporte para m√∫ltiples idiomas',
      'Traducci√≥n contextual y natural',
    ],
  });
} 