require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno faltantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixSessionSync() {
  console.log('üîß Iniciando verificaci√≥n y limpieza de sesiones...\n');

  try {
    // 1. Verificar sesiones existentes
    console.log('üìã Verificando sesiones existentes...');
    const { data: sessions, error: sessionsError } = await supabase
      .from('CashSession')
      .select('*')
      .order('id', { ascending: false });

    if (sessionsError) {
      console.error('‚ùå Error obteniendo sesiones:', sessionsError);
      return;
    }

    console.log(`‚úÖ Encontradas ${sessions.length} sesiones:`);
    sessions.forEach(session => {
      console.log(`   - Sesi√≥n ${session.id}: ${session.status} ($${session.openingAmount})`);
    });

    // 2. Verificar transacciones hu√©rfanas
    console.log('\nüîç Verificando transacciones hu√©rfanas...');
    
    const { data: expenses, error: expensesError } = await supabase
      .from('PettyCashExpense')
      .select('id, sessionId, amount, description')
      .order('createdAt', { ascending: false });

    const { data: purchases, error: purchasesError } = await supabase
      .from('PettyCashPurchase')
      .select('id, sessionId, totalAmount, description')
      .order('createdAt', { ascending: false });

    if (expensesError) console.error('‚ùå Error obteniendo gastos:', expensesError);
    if (purchasesError) console.error('‚ùå Error obteniendo compras:', purchasesError);

    const sessionIds = sessions.map(s => s.id);
    
    // Verificar gastos hu√©rfanos
    if (expenses) {
      const orphanExpenses = expenses.filter(exp => !sessionIds.includes(exp.sessionId));
      if (orphanExpenses.length > 0) {
        console.log(`üî¥ Encontrados ${orphanExpenses.length} gastos hu√©rfanos:`);
        orphanExpenses.forEach(exp => {
          console.log(`   - Gasto ${exp.id}: Sesi√≥n ${exp.sessionId} ($${exp.amount}) - ${exp.description}`);
        });
      } else {
        console.log('‚úÖ No hay gastos hu√©rfanos');
      }
    }

    // Verificar compras hu√©rfanas
    if (purchases) {
      const orphanPurchases = purchases.filter(pur => !sessionIds.includes(pur.sessionId));
      if (orphanPurchases.length > 0) {
        console.log(`üî¥ Encontradas ${orphanPurchases.length} compras hu√©rfanas:`);
        orphanPurchases.forEach(pur => {
          console.log(`   - Compra ${pur.id}: Sesi√≥n ${pur.sessionId} ($${pur.totalAmount}) - ${pur.description}`);
        });
      } else {
        console.log('‚úÖ No hay compras hu√©rfanas');
      }
    }

    // 3. Verificar cierres de caja
    console.log('\nüí∞ Verificando cierres de caja...');
    const { data: closures, error: closuresError } = await supabase
      .from('CashClosure')
      .select('id, sessionId, closingAmount, closedAt');

    if (closuresError) {
      console.error('‚ùå Error obteniendo cierres:', closuresError);
    } else {
      const orphanClosures = closures.filter(closure => !sessionIds.includes(closure.sessionId));
      if (orphanClosures.length > 0) {
        console.log(`üî¥ Encontrados ${orphanClosures.length} cierres hu√©rfanos:`);
        orphanClosures.forEach(closure => {
          console.log(`   - Cierre ${closure.id}: Sesi√≥n ${closure.sessionId} ($${closure.closingAmount})`);
        });
      } else {
        console.log('‚úÖ No hay cierres hu√©rfanos');
      }
    }

    // 4. Resumen y recomendaciones
    console.log('\nüìä RESUMEN:');
    console.log('==========');
    console.log(`   - Sesiones totales: ${sessions.length}`);
    console.log(`   - Sesiones abiertas: ${sessions.filter(s => s.status === 'open').length}`);
    console.log(`   - Sesiones cerradas: ${sessions.filter(s => s.status === 'closed').length}`);
    console.log(`   - Sesiones suspendidas: ${sessions.filter(s => s.status === 'suspended').length}`);

    const totalOrphanExpenses = expenses ? expenses.filter(exp => !sessionIds.includes(exp.sessionId)).length : 0;
    const totalOrphanPurchases = purchases ? purchases.filter(pur => !sessionIds.includes(pur.sessionId)).length : 0;
    const totalOrphanClosures = closures ? closures.filter(closure => !sessionIds.includes(closure.sessionId)).length : 0;

    if (totalOrphanExpenses > 0 || totalOrphanPurchases > 0 || totalOrphanClosures > 0) {
      console.log('\n‚ö†Ô∏è  PROBLEMAS DETECTADOS:');
      console.log(`   - Gastos hu√©rfanos: ${totalOrphanExpenses}`);
      console.log(`   - Compras hu√©rfanas: ${totalOrphanPurchases}`);
      console.log(`   - Cierres hu√©rfanos: ${totalOrphanClosures}`);
      
      console.log('\nüí° RECOMENDACIONES:');
      console.log('   1. Revisar si las transacciones hu√©rfanas son v√°lidas');
      console.log('   2. Si son v√°lidas, crear sesiones para ellas');
      console.log('   3. Si no son v√°lidas, eliminarlas manualmente');
      console.log('   4. Verificar que no haya problemas de integridad referencial');
    } else {
      console.log('\n‚úÖ SISTEMA EN BUEN ESTADO');
      console.log('   No se detectaron problemas de sincronizaci√≥n');
    }

  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error);
  }
}

fixSessionSync(); 