require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîß Verificando configuraci√≥n de Supabase...');
console.log('URL:', supabaseUrl ? '‚úÖ Presente' : '‚ùå Faltante');
console.log('Service Key:', supabaseServiceKey ? '‚úÖ Presente' : '‚ùå Faltante');

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Faltan variables de entorno de Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkConnection() {
  try {
    console.log('\nüîç Probando conexi√≥n a Supabase...');
    
    // Verificar estructura de tablas
    console.log('\nüîç Verificando estructura de tablas...');
    
    // Verificar CashSession espec√≠ficamente
    console.log('\nüìã Verificando tabla CashSession...');
    
    // Intentar obtener informaci√≥n de la tabla sin datos
    const { data: tableInfo, error: tableError } = await supabase
      .from('CashSession')
      .select('*')
      .limit(0);
    
    if (tableError) {
      console.error('‚ùå Error al consultar estructura de CashSession:', tableError);
    } else {
      console.log('‚úÖ Tabla CashSession accesible');
      console.log('üìã La tabla existe pero no podemos ver las columnas sin datos');
    }
    
    // Intentar crear una sesi√≥n m√≠nima para ver la estructura
    console.log('\nüß™ Intentando crear sesi√≥n m√≠nima para verificar estructura...');
    const { data: testSession, error: testError } = await supabase
      .from('CashSession')
      .insert({
        userId: '00000000-0000-0000-0000-000000000000',
        cashRegisterId: 1,
        openingAmount: 1000,
        currentAmount: 1000,
        status: 'open',
        openedAt: new Date().toISOString()
      })
      .select()
      .single();
    
    if (testError) {
      console.error('‚ùå Error al crear sesi√≥n m√≠nima:', testError);
      console.log('üìã Esto indica qu√© columnas faltan o est√°n mal configuradas');
    } else {
      console.log('‚úÖ Sesi√≥n m√≠nima creada exitosamente');
      console.log('üìã Estructura de CashSession:', Object.keys(testSession));
      console.log('üìã Datos de la sesi√≥n:', testSession);
      
      // Eliminar la sesi√≥n de prueba
      await supabase
        .from('CashSession')
        .delete()
        .eq('id', testSession.id);
      console.log('üßπ Sesi√≥n de prueba eliminada');
    }
    
    // Verificar User espec√≠ficamente
    console.log('\nüìã Verificando tabla User...');
    const { data: users, error: userError } = await supabase
      .from('User')
      .select('*')
      .limit(1);
    
    if (userError) {
      console.error('‚ùå Error al consultar User:', userError);
    } else {
      console.log('‚úÖ Tabla User accesible');
      if (users && users.length > 0) {
        console.log('üìã Columnas de User:', Object.keys(users[0]));
      } else {
        console.log('‚ÑπÔ∏è Tabla User vac√≠a');
      }
    }
    
    // Verificar relaciones
    console.log('\nüîç Verificando relaciones...');
    
    const { data: sessionWithUser, error: relationError } = await supabase
      .from('CashSession')
      .select(`
        *,
        User:User(id, name, email)
      `)
      .limit(1);
    
    if (relationError) {
      console.error('‚ùå Error en relaci√≥n CashSession-User:', relationError);
    } else {
      console.log('‚úÖ Relaci√≥n CashSession-User funciona');
      if (sessionWithUser && sessionWithUser.length > 0) {
        console.log('üìã Datos con relaci√≥n:', sessionWithUser[0]);
      }
    }
    
    // Verificar sesiones activas
    console.log('\nüîç Verificando sesiones activas...');
    
    const { data: activeSessions, error: activeError } = await supabase
      .from('CashSession')
      .select('*')
      .eq('status', 'open');
    
    if (activeError) {
      console.error('‚ùå Error al consultar sesiones activas:', activeError);
    } else {
      console.log(`‚úÖ Sesiones activas encontradas: ${activeSessions?.length || 0}`);
      if (activeSessions && activeSessions.length > 0) {
        activeSessions.forEach(session => {
          console.log(`  - ID: ${session.id}, Usuario: ${session.userId}, Monto: $${session.currentAmount}`);
        });
      }
    }
    
    // Verificar todas las sesiones con openedAt
    console.log('\nüîç Verificando todas las sesiones con openedAt...');
    
    const { data: allSessions, error: allError } = await supabase
      .from('CashSession')
      .select('*')
      .order('openedAt', { ascending: false })
      .limit(5);
    
    if (allError) {
      console.error('‚ùå Error al consultar todas las sesiones:', allError);
    } else {
      console.log(`‚úÖ Total de sesiones encontradas: ${allSessions?.length || 0}`);
      if (allSessions && allSessions.length > 0) {
        allSessions.forEach(session => {
          console.log(`  - ID: ${session.id}, Status: ${session.status}, Usuario: ${session.userId}, Monto: $${session.currentAmount}, Fecha: ${session.openedAt}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
}

checkConnection(); 