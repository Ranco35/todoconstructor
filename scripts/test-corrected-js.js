const https = require('https');

const NEW_URL = 'https://admintermas-2xfpzgbo4-eduardo-probostes-projects.vercel.app';

console.log('üîß VERIFICACI√ìN DE ARCHIVOS JAVASCRIPT CORREGIDOS');
console.log('===============================================');
console.log(`üéØ URL: ${NEW_URL}`);
console.log('');

async function testJSFiles() {
  // Probar un archivo JS espec√≠fico
  const jsTestUrl = `${NEW_URL}/_next/static/chunks/1684-b5376ee246a13ee1.js`;
  
  return new Promise((resolve) => {
    console.log('üîç Probando archivo JavaScript...');
    
    const req = https.request(jsTestUrl, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const status = res.statusCode;
        const contentType = res.headers['content-type'] || '';
        
        console.log(`üìä RESULTADO ARCHIVO JS:`);
        console.log(`   Status: ${status} ${status === 200 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Content-Type: ${contentType}`);
        console.log(`   Tama√±o: ${data.length} bytes`);
        console.log('');
        
        // Verificar si es JavaScript v√°lido
        const isJS = contentType.includes('javascript') || contentType.includes('text/plain');
        const startsWithHTML = data.trim().startsWith('<');
        const hasJSContent = data.includes('function') || data.includes('=>') || data.includes('var');
        
        console.log(`üî¨ AN√ÅLISIS DEL ARCHIVO:`);
        console.log(`   ‚úÖ Content-Type correcto: ${isJS ? 'S√ç' : 'NO'}`);
        console.log(`   ‚ùå Empieza con HTML: ${startsWithHTML ? 'S√ç - PROBLEMA' : 'NO - BIEN'}`);
        console.log(`   ‚úÖ Contiene JS: ${hasJSContent ? 'S√ç - BIEN' : 'NO - PROBLEMA'}`);
        console.log('');
        
        if (status === 200 && !startsWithHTML && hasJSContent) {
          console.log('üéâ ¬°ARCHIVOS JAVASCRIPT CORREGIDOS!');
          console.log('   ‚úÖ Los archivos .js ahora sirven JavaScript correctamente');
          console.log('   ‚úÖ El problema de SyntaxError est√° RESUELTO');
        } else {
          console.log('‚ùå Los archivos JS a√∫n tienen problemas');
          if (startsWithHTML) {
            console.log('   - A√∫n devuelven HTML en lugar de JS');
          }
        }
        
        resolve({ 
          status, 
          working: status === 200 && !startsWithHTML && hasJSContent,
          isJS: !startsWithHTML && hasJSContent
        });
      });
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå Error: ${error.message}`);
      resolve({ status: 'ERROR', working: false });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      console.log(`‚è±Ô∏è Timeout`);
      resolve({ status: 'TIMEOUT', working: false });
    });
    
    req.end();
  });
}

async function testDashboard() {
  return new Promise((resolve) => {
    const dashboardUrl = `${NEW_URL}/dashboard`;
    console.log('üè† Probando dashboard...');
    
    const req = https.request(dashboardUrl, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const status = res.statusCode;
        const hasHTML = data.includes('<html>');
        const hasDashboard = data.includes('Dashboard Admintermas') || data.includes('dashboard');
        
        console.log(`üìä RESULTADO DASHBOARD:`);
        console.log(`   Status: ${status} ${status === 200 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   HTML v√°lido: ${hasHTML ? '‚úÖ' : '‚ùå'}`);
        console.log(`   Contenido dashboard: ${hasDashboard ? '‚úÖ' : '‚ùå'}`);
        
        resolve({ 
          status, 
          working: status === 200 && hasHTML,
          hasDashboard 
        });
      });
    });
    
    req.on('error', (error) => {
      console.log(`‚ùå Error dashboard: ${error.message}`);
      resolve({ status: 'ERROR', working: false });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      console.log(`‚è±Ô∏è Timeout dashboard`);
      resolve({ status: 'TIMEOUT', working: false });
    });
    
    req.end();
  });
}

async function runTests() {
  const jsResult = await testJSFiles();
  const dashboardResult = await testDashboard();
  
  console.log('');
  console.log('üìã RESUMEN FINAL:');
  console.log('=================');
  
  if (jsResult.working && dashboardResult.working) {
    console.log('üéâ ¬°TODO FUNCIONANDO PERFECTAMENTE!');
    console.log('   ‚úÖ Archivos JavaScript corregidos');
    console.log('   ‚úÖ Dashboard carga correctamente');
    console.log('   ‚úÖ Problema de SyntaxError RESUELTO');
    console.log('');
    console.log('üîó URL FUNCIONAL:');
    console.log(`   ${NEW_URL}/dashboard`);
  } else {
    console.log('üîß Algunos problemas persisten:');
    if (!jsResult.working) console.log('   - Archivos JS necesitan correcci√≥n');
    if (!dashboardResult.working) console.log('   - Dashboard necesita correcci√≥n');
  }
}

runTests().catch(console.error); 