const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Faltan variables de entorno de Supabase');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ Configurado' : '‚ùå Faltante');
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ Configurado' : '‚ùå Faltante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function updateJosePassword() {
  console.log('üöÄ Actualizando contrase√±a de Jos√©...');
  
  const email = 'jose@termasllifen.cl';
  const newPassword = '2014jose';
  
  try {
    // 1. Buscar usuario en Supabase Auth
    console.log('üîç Buscando usuario en Auth...');
    const { data: users, error: listError } = await supabase.auth.admin.listUsers();
    
    if (listError) {
      console.error('‚ùå Error listando usuarios:', listError.message);
      return;
    }

    const authUser = users.users.find(user => user.email === email);
    
    if (!authUser) {
      console.error('‚ùå Usuario no encontrado en Auth');
      console.log('üìß Emails disponibles:', users.users.map(u => u.email));
      return;
    }

    console.log('‚úÖ Usuario encontrado en Auth:', authUser.id);
    console.log('üìß Email:', authUser.email);
    console.log('üë§ Nombre:', authUser.user_metadata?.name || 'No especificado');

    // 2. Actualizar contrase√±a en Supabase Auth
    console.log('üîê Actualizando contrase√±a...');
    const { data: updatedUser, error: updateError } = await supabase.auth.admin.updateUserById(
      authUser.id,
      { password: newPassword }
    );

    if (updateError) {
      console.error('‚ùå Error actualizando contrase√±a:', updateError.message);
      return;
    }

    console.log('‚úÖ Contrase√±a actualizada exitosamente');

    // 3. Verificar que el usuario existe en la tabla User
    console.log('üîç Verificando perfil en tabla User...');
    const { data: userProfile, error: profileError } = await supabase
      .from('User')
      .select('*')
      .eq('id', authUser.id)
      .single();

    if (profileError && profileError.code !== 'PGRST116') {
      console.error('‚ùå Error verificando perfil:', profileError.message);
      return;
    }

    if (userProfile) {
      console.log('‚úÖ Perfil encontrado en tabla User');
      console.log('üë§ Nombre:', userProfile.name);
      console.log('üè∑Ô∏è Departamento:', userProfile.department);
    } else {
      console.log('‚ö†Ô∏è Usuario no encontrado en tabla User (solo en Auth)');
    }

    // 4. Mostrar informaci√≥n final
    console.log('\nüéâ ¬°Contrase√±a actualizada exitosamente!');
    console.log('üìß Email:', email);
    console.log('üîê Nueva contrase√±a:', newPassword);
    console.log('üÜî ID:', authUser.id);
    console.log('üåê URL de login: https://admintermas.vercel.app/login');
    console.log('\n‚úÖ Jos√© puede hacer login con su email y la nueva contrase√±a');

  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message);
  }
}

// Ejecutar el script
updateJosePassword()
  .then(() => {
    console.log('\n‚úÖ Script completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error ejecutando script:', error);
    process.exit(1);
  }); 