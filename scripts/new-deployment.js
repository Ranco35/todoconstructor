#!/usr/bin/env node

/**
 * Script para hacer un nuevo deployment y capturar la URL
 */

const { execSync } = require('child_process');

console.log('üöÄ NUEVO DEPLOYMENT - CAPTURANDO URL CORRECTA');
console.log('============================================\n');

function runCommand(command, description) {
  console.log(`üîç ${description}...`);
  try {
    const result = execSync(command, { encoding: 'utf8' });
    return result;
  } catch (error) {
    console.log(`‚ùå Error: ${error.message}`);
    return null;
  }
}

function extractURLFromOutput(output) {
  // Buscar URLs en el output
  const urlRegex = /https:\/\/[a-zA-Z0-9-]+\.vercel\.app/g;
  const urls = output.match(urlRegex);
  return urls ? [...new Set(urls)] : [];
}

async function newDeployment() {
  console.log('üìã INFORMACI√ìN PREVIA:');
  console.log('- Build anterior: ‚úÖ Exitoso (23 p√°ginas)');
  console.log('- Variables: ‚úÖ Configuradas');
  console.log('- Protecci√≥n Vercel: ‚úÖ Desactivada');
  console.log('- Problema: 404 en todas las URLs\n');
  
  console.log('üöÄ Ejecutando nuevo deployment...\n');
  
  const output = runCommand('vercel --prod --force', 'Deployment en producci√≥n');
  
  if (output) {
    console.log('\nüìä ANALIZANDO OUTPUT DEL DEPLOYMENT:\n');
    
    // Extraer URLs del output
    const urls = extractURLFromOutput(output);
    
    if (urls.length > 0) {
      console.log('üåê URLs ENCONTRADAS:');
      urls.forEach((url, index) => {
        console.log(`   ${index + 1}. ${url}`);
      });
      
      // Usar la √∫ltima URL (m√°s reciente)
      const latestUrl = urls[urls.length - 1];
      console.log(`\nüéØ URL PRINCIPAL: ${latestUrl}`);
      
      // Probar la URL inmediatamente
      console.log('\nüß™ Probando la nueva URL...');
      
      try {
        const testResult = execSync(`curl -s -o /dev/null -w "%{http_code}" "${latestUrl}"`, { encoding: 'utf8' });
        const statusCode = testResult.trim();
        
        console.log(`   Status: ${statusCode} ${statusCode === '200' ? '‚úÖ' : '‚ùå'}`);
        
        if (statusCode === '200') {
          console.log('\nüéâ ¬°√âXITO! La aplicaci√≥n est√° funcionando');
          console.log(`üîó URL funcionando: ${latestUrl}`);
        } else {
          console.log(`\n‚ö†Ô∏è Status ${statusCode} - A√∫n hay problemas`);
        }
      } catch (error) {
        console.log('   ‚ö†Ô∏è No se pudo probar con curl, prueba manualmente');
      }
      
    } else {
      console.log('‚ùå No se encontraron URLs en el output del deployment');
    }
    
    // Mostrar informaci√≥n adicional
    console.log('\nüìù PR√ìXIMOS PASOS:');
    if (urls.length > 0) {
      console.log(`1. Abre: ${urls[urls.length - 1]}`);
      console.log('2. Verifica que cargue correctamente');
      console.log('3. Prueba login y funcionalidades');
    } else {
      console.log('1. Ejecuta: vercel ls');
      console.log('2. Encuentra la URL m√°s reciente');
      console.log('3. Prueba esa URL manualmente');
    }
    
  } else {
    console.log('‚ùå Error en el deployment');
  }
}

newDeployment(); 